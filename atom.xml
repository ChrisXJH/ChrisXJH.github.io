<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>克里斯</title>
  
  <subtitle>是.me不是.com</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chrisxjh.github.io/"/>
  <updated>2018-10-27T21:10:50.277Z</updated>
  <id>http://chrisxjh.github.io/</id>
  
  <author>
    <name>Chris Xu</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于WeChat for Web API的微信联系人男女比例分析</title>
    <link href="http://chrisxjh.github.io/2018/10/17/%E5%9F%BA%E4%BA%8EWeChat-for-Web-API%E7%9A%84%E5%BE%AE%E4%BF%A1%E8%81%94%E7%B3%BB%E4%BA%BA%E7%94%B7%E5%A5%B3%E6%AF%94%E4%BE%8B%E5%88%86%E6%9E%90/"/>
    <id>http://chrisxjh.github.io/2018/10/17/基于WeChat-for-Web-API的微信联系人男女比例分析/</id>
    <published>2018-10-18T02:42:40.000Z</published>
    <updated>2018-10-27T21:10:50.277Z</updated>
    
    <content type="html"><![CDATA[<p>微信网页版推出有很长一段时间了，虽然现在已经很少有人用了(大家都在用PC版或者Mac版)，WeChat for Web对于程序员来说还是挺有研究价值的。</p><img src="/2018/10/17/基于WeChat-for-Web-API的微信联系人男女比例分析/chrome.png"><a id="more"></a><p>其实微信网页版的实现原理很简单，大概就是通过REST API向微信后台发送https请求，再把后台返回的信息反馈到用户界面上。我们不妨在微信网页版运行的时候，打开谷歌浏览器的开发者工具，进入Network，便能查看所有网页端向微信后台发送的请求。</p><h2 id="wechat4u-js"><a href="#wechat4u-js" class="headerlink" title="wechat4u.js"></a>wechat4u.js</h2><p>wechat4u.js是一个基于Node封装了微信网页版api的第三方库，使用方法非常简单。GitHub网址：<a href="https://github.com/nodeWechat/wechat4u" target="_blank" rel="noopener">https://github.com/nodeWechat/wechat4u</a></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>首先建立一个新的node项目<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure></p><p>项目建立好后安装wechat4u和qrcode-terminal<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save wechat4u@latest</span><br><span class="line">npm install --save qrcode-terminal</span><br></pre></td></tr></table></figure></p><h2 id="分析联系人男女比例"><a href="#分析联系人男女比例" class="headerlink" title="分析联系人男女比例"></a>分析联系人男女比例</h2><p>新建一个index.js文件，在文件里写入代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Wechat = <span class="built_in">require</span>(<span class="string">'wechat4u'</span>);</span><br><span class="line"><span class="keyword">const</span> qrcode = <span class="built_in">require</span>(<span class="string">'qrcode-terminal'</span>);</span><br><span class="line"><span class="keyword">let</span> bot = <span class="keyword">new</span> Wechat();</span><br><span class="line">bot.start();</span><br><span class="line"></span><br><span class="line">bot.on(<span class="string">'uuid'</span>, uuid =&gt; &#123;</span><br><span class="line">    qrcode.generate(<span class="string">'https://login.weixin.qq.com/l/'</span> + uuid, &#123;</span><br><span class="line">        small: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'二维码地址: '</span>, <span class="string">'https://login.weixin.qq.com/qrcode/'</span> + uuid);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">bot.on(<span class="string">'login'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'微信登录成功！'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 联系人更新事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">bot.on(<span class="string">'contacts-updated'</span>, (contacts) =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"联系人更新完成"</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>当微信登录后，程序会向微信后台发送联系人更新请求，当有联系人数据返回时，”contacts-updated”事件会被触发。但要注意的是刚开始得到的联系人并不是完整的联系人数据，并且返回的联系人包括群组。为了保证分析的数据是完整的，我们要记录每一次返回联系人的数量，要是数量较上一次返回的多，应重新分析数据。   </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> numOfContacts = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 联系人更新事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">bot.on(<span class="string">'contacts-updated'</span>, (contacts) =&gt; &#123;</span><br><span class="line">    <span class="comment">// 比较新数据与旧数据的数量</span></span><br><span class="line">    <span class="keyword">if</span> (numOfContacts &lt; contacts.length) &#123;</span><br><span class="line">        numOfContacts = contacts.length;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"联系人更新完成"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来就可以编写数据分析的逻辑代码了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分析联系人性别</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param contacts </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">analyzeContacts</span>(<span class="params">contacts</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = &#123;</span><br><span class="line">       numOfMales: <span class="number">0</span>,</span><br><span class="line">       numOfFemales:<span class="number">0</span>,</span><br><span class="line">       unknowns: <span class="number">0</span> </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    contacts.forEach(<span class="function"><span class="params">con</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (con[<span class="string">'Sex'</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 男</span></span><br><span class="line">            result.numOfMales++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (con[<span class="string">'Sex'</span>] == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">// 女</span></span><br><span class="line">            result.numOfFemales++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 未知</span></span><br><span class="line">            result.unknowns++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 计算男女比例</span></span><br><span class="line">    result.ratio = result.numOfMales != <span class="number">0</span> ? (result.numOfFemales / result.numOfMales) : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 联系人更新事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">bot.on(<span class="string">'contacts-updated'</span>, (contacts) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (numOfContacts &lt; contacts.length) &#123;</span><br><span class="line">        numOfContacts = contacts.length;</span><br><span class="line">        <span class="built_in">console</span>.log(analyzeContacts(contacts));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure> <img src="/2018/10/17/基于WeChat-for-Web-API的微信联系人男女比例分析/logs.png"><p> 其实还有很多种玩法的，请自行发挥。</p><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Wechat = <span class="built_in">require</span>(<span class="string">'wechat4u'</span>);</span><br><span class="line"><span class="keyword">const</span> qrcode = <span class="built_in">require</span>(<span class="string">'qrcode-terminal'</span>);</span><br><span class="line"><span class="keyword">let</span> bot = <span class="keyword">new</span> Wechat();</span><br><span class="line"><span class="keyword">let</span> numOfContacts = <span class="number">0</span>;</span><br><span class="line">bot.start();</span><br><span class="line"></span><br><span class="line">bot.on(<span class="string">'uuid'</span>, uuid =&gt; &#123;</span><br><span class="line">    qrcode.generate(<span class="string">'https://login.weixin.qq.com/l/'</span> + uuid, &#123;</span><br><span class="line">        small: <span class="literal">true</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'二维码地址: '</span>, <span class="string">'https://login.weixin.qq.com/qrcode/'</span> + uuid);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">bot.on(<span class="string">'login'</span>, () =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'微信登录成功！'</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 分析联系人性别</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * @param contacts </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">analyzeContacts</span>(<span class="params">contacts</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = &#123;</span><br><span class="line">       numOfMales: <span class="number">0</span>,</span><br><span class="line">       numOfFemales:<span class="number">0</span>,</span><br><span class="line">       unknowns: <span class="number">0</span> </span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    contacts.forEach(<span class="function"><span class="params">con</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (con[<span class="string">'Sex'</span>] == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 男</span></span><br><span class="line">            result.numOfMales++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (con[<span class="string">'Sex'</span>] == <span class="number">2</span>) &#123;</span><br><span class="line">            <span class="comment">// 女</span></span><br><span class="line">            result.numOfFemales++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 未知</span></span><br><span class="line">            result.unknowns++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 计算男女比例</span></span><br><span class="line">    result.ratio = result.numOfMales != <span class="number">0</span> ? (result.numOfFemales / result.numOfMales) : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 联系人更新事件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">bot.on(<span class="string">'contacts-updated'</span>, (contacts) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (numOfContacts &lt; contacts.length) &#123;</span><br><span class="line">        numOfContacts = contacts.length;</span><br><span class="line">        <span class="built_in">console</span>.log(analyzeContacts(contacts));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;微信网页版推出有很长一段时间了，虽然现在已经很少有人用了(大家都在用PC版或者Mac版)，WeChat for Web对于程序员来说还是挺有研究价值的。&lt;/p&gt;
&lt;img src=&quot;/2018/10/17/基于WeChat-for-Web-API的微信联系人男女比例分析/chrome.png&quot;&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DIY Raspberry Pi 倒车雷达程序设计</title>
    <link href="http://chrisxjh.github.io/2018/01/06/Raspberry-PI-3-%E8%87%AA%E5%88%B6%E5%80%92%E8%BD%A6%E9%9B%B7%E8%BE%BE/"/>
    <id>http://chrisxjh.github.io/2018/01/06/Raspberry-PI-3-自制倒车雷达/</id>
    <published>2018-01-06T20:31:01.000Z</published>
    <updated>2018-10-27T21:10:50.277Z</updated>
    
    <content type="html"><![CDATA[<div class="video-container"><iframe src="//www.youtube.com/embed/5cGRnKQr8CA" frameborder="0" allowfullscreen></iframe></div><p>最近气温每天零下十几度，在家闲得无聊，突发奇想用Raspberry PI做了一个简易的倒车雷达。至于有没有实际用途，再说嘛，或许过几年就有钱买车了呢…</p><p>选择用Raspberry PI做的原因是… 嗯，家里正好有一个闲置的树莓派3。并且raspbian上可以直接用gcc编译c++程序。</p><p>Github：<a href="https://github.com/ChrisXJH/parking_sensor" target="_blank" rel="noopener">https://github.com/ChrisXJH/parking_sensor</a></p><a id="more"></a><p><br></p><h2 id="wiringPi"><a href="#wiringPi" class="headerlink" title="wiringPi"></a>wiringPi</h2><blockquote><p>WiringPi是应用于树莓派平台的GPIO控制库函数，WiringPi遵守GUN Lv3。wiringPi使用C或者C++开发并且可以被其他语言包转，例如python、ruby或者PHP等。WiringPi中的函数类似于Arduino的wiring系统，这使得熟悉arduino的用户使用wringPi更为方便。<br>树莓派具有26个普通输入和输出引脚。在这26个引脚中具有8个普通输入和输出管脚，这8个引脚既可以作为输入管脚也可以作为输出管脚。除此之外，树莓派还有一个2线形式的I2C、一个4线形式的SPI和一个UART接口。树莓派上的I2C和SPI接口也可以作为普通端口使用。如果串口控制台被关闭便可以使用树莓派上的UART功能。如果不使用I2C，SPI和UART等复用接口，那么树莓派总共具有8+2+5+2 =17个普通IO。wiringPi包括一套gpio控制命令，使用gpio命令可以控制树莓派GPIO管脚。用户可以利用gpio命令通过shell脚本控制或查询GPIO管脚。wiringPi是可以扩展的，可以利用wiringPi的内部模块扩展模拟量输入芯片，可以使用MCP23x17/MCP23x08（I2C 或者SPI）扩展GPIO接口。另外可通过树莓派上的串口和Atmega（例如arduino等）扩展更多的GPIO功能。另外，用户可以自己编写扩展模块并把自定义的扩展模块集成到wiringPi中。WiringPi支持模拟量的读取和设置功能，不过在树莓派上并没有模拟量设备。但是使用WiringPi中的软件模块却可以轻松地应用AD或DA芯片。</p><footer><strong>@CSDN</strong><cite><a href="http://blog.csdn.net/xukai871105/article/details/17737005" target="_blank" rel="noopener">blog.csdn.net/xukai871105/article/details/17737005</a></cite></footer></blockquote><p><br></p><p>wiringPi官网：<a href="http://wiringpi.com/" target="_blank" rel="noopener">http://wiringpi.com/</a></p><p>下面是一个自己写的interface，用来简化程序开发时的gpio操作。</p><figure class="highlight c"><figcaption><span>gpio_interface.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"wiringPi.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"gpio_interface.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BUZZER 5</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LED_SUCCESS 19</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISTANCE_TRIG 16</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISTANCE_ECHO 20</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">buzz</span><span class="params">(<span class="keyword">const</span> <span class="keyword">bool</span> on)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (on) digitalWrite(BUZZER, HIGH);</span><br><span class="line">    <span class="keyword">else</span> digitalWrite(BUZZER, LOW);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">blink_green</span><span class="params">(<span class="keyword">const</span> <span class="keyword">bool</span> on)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (on) digitalWrite(LED_SUCCESS, HIGH);</span><br><span class="line">    <span class="keyword">else</span> digitalWrite(LED_SUCCESS, LOW);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">measure_distance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">clock_t</span> start, end;</span><br><span class="line">    digitalWrite(DISTANCE_TRIG, HIGH);</span><br><span class="line">    delay(<span class="number">0.00001</span>);</span><br><span class="line">    digitalWrite(DISTANCE_TRIG, LOW);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Making sure the signal is sent out</span></span><br><span class="line">    <span class="keyword">while</span> (!digitalRead(DISTANCE_ECHO)) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="comment">// Mark down the time at which the signal is sent out</span></span><br><span class="line">    start = clock();</span><br><span class="line">    <span class="comment">// Keep listening for echo signal</span></span><br><span class="line">    <span class="keyword">while</span> (digitalRead(DISTANCE_ECHO)) <span class="keyword">continue</span>;</span><br><span class="line">    <span class="comment">// Mark down the time when receiving the feedback signal</span></span><br><span class="line">    end = clock();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">double</span> clocks_per_mill = CLOCKS_PER_SEC / <span class="number">1000</span>;</span><br><span class="line">    <span class="keyword">return</span> ((end - start) / clocks_per_mill) * <span class="number">34.3</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init_gpio</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    wiringPiSetupGpio();</span><br><span class="line">    pinMode(BUZZER, OUTPUT);</span><br><span class="line">    pinMode(LED_SUCCESS, OUTPUT);</span><br><span class="line">    pinMode(DISTANCE_TRIG, OUTPUT);</span><br><span class="line">    pinMode(DISTANCE_ECHO, INPUT);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">close_gpio</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    digitalWrite(BUZZER, LOW);</span><br><span class="line">    digitalWrite(LED_SUCCESS, LOW);</span><br><span class="line">    digitalWrite(DISTANCE_TRIG, LOW);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h2 id="观察者设计模式"><a href="#观察者设计模式" class="headerlink" title="观察者设计模式"></a>观察者设计模式</h2><p>本项目采用观察者设计模式，主要有两个基类：Observer（观察者）和 Subject（主体）。每个观察者可以订阅一个或多个主体，当主体的状态发生变化时，主体会立即通知观察者。</p><img src="http://design-patterns.readthedocs.io/zh_CN/latest/_images/Obeserver.jpg" class="[class names]" title="观察者模式图解"><figure class="highlight c"><figcaption><span>observer.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; <span class="class"><span class="keyword">class</span> <span class="title">Subject</span>;</span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Observer() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(Subject&lt;T&gt; &amp;)</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">virtual</span> ~Observer() &#123;&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>subject.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"observer.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Subject</span> &#123;</span></span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Observer&lt;T&gt;* &gt; observers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Subject() &#123;&#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~Subject() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> T <span class="title">getInfo</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">attachObserver</span><span class="params">(Observer&lt;T&gt; * ob)</span> </span>&#123;</span><br><span class="line">        observers.emplace_back(ob);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> &amp;ob : observers) &#123;</span><br><span class="line">            ob-&gt;notify(* <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br><br>因为当感应器检测到障碍物时，系统需要通知报警器进行报警，所以感应器需继承主体（Subject）。当检测到障碍物时，感应器便会通知主体并且告诉主体关于障碍物的信息。为了提升可扩展性（感应器可以有很多种），距离传感器（distanceSensor）应继承感应器基类（Sensor），而不应该直接继承Subject。</p><figure class="highlight c"><figcaption><span>distanceSensor.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DistanceSensor</span> :</span> <span class="keyword">public</span> Sensor &#123;</span><br><span class="line">    <span class="keyword">double</span> distance;</span><br><span class="line">    <span class="keyword">double</span> interval;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">detectDistance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">simulateDistance</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setInterval</span><span class="params">(<span class="keyword">const</span> <span class="keyword">double</span> &amp;inv)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    DistanceSensor();</span><br><span class="line">    ~DistanceSensor();</span><br><span class="line"></span><br><span class="line">    <span class="function">SensorInfo <span class="title">getInfo</span><span class="params">()</span> override</span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">start</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><p>distanceSensor会定期测量汽车尾部与障碍物的距离。每当得到新距离时，distanceSensor会通过Controller::notify(Subject<sensorinfo> &amp;whoFrom)来通知Controller。这时， Controller可以调用distanceSensor::getInfo()来获取到汽车相对于障碍物的距离。当然了，前提是Controller继承Observer。</sensorinfo></p><p>Controller同时继承Subject。当Controller接收到distanceSensor传来的距离信息时，会通知Monitor（Observer），并把距离信息传给Monitor来判断需不需要报警。</p><figure class="highlight c"><figcaption><span>controller.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"monitor.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"observer.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"subject.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;memory&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sensor</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monitor</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SensorInfo</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ControllerInfo</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ControllerTemp</span> &#123;</span></span><br><span class="line">    <span class="keyword">double</span> distance;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Controller</span> :</span> <span class="keyword">public</span> Observer&lt;SensorInfo&gt;, <span class="keyword">public</span> Subject&lt;ControllerInfo&gt; &#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">unique_ptr</span>&lt;ControllerTemp&gt; temp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Controller();</span><br><span class="line">    ~Controller();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addSensor</span><span class="params">(Sensor * )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addMonitor</span><span class="params">(Monitor * )</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">notify</span><span class="params">(Subject&lt;SensorInfo&gt; &amp;)</span> override</span>;</span><br><span class="line">    <span class="function">ControllerInfo <span class="title">getInfo</span><span class="params">()</span> override</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight c"><figcaption><span>monitor.h</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"observer.h"</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ControllerInfo</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monitor</span> :</span> <span class="keyword">public</span> Observer&lt;ControllerInfo&gt; &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    Monitor();</span><br><span class="line">    <span class="keyword">virtual</span> ~Monitor();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">notify</span><span class="params">(Subject&lt;ControllerInfo&gt; &amp;)</span> </span>= <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><br></p><h2 id="参考网站"><a href="#参考网站" class="headerlink" title="参考网站"></a>参考网站</h2><ul><li><a href="http://wiringpi.com/" target="_blank" rel="noopener">http://wiringpi.com/</a></li><li><a href="http://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/observer.html" target="_blank" rel="noopener">http://design-patterns.readthedocs.io/zh_CN/latest/behavioral_patterns/observer.html</a></li><li><a href="http://blog.csdn.net/xukai871105/article/details/17737005" target="_blank" rel="noopener">http://blog.csdn.net/xukai871105/article/details/17737005</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;div class=&quot;video-container&quot;&gt;&lt;iframe src=&quot;//www.youtube.com/embed/5cGRnKQr8CA&quot; frameborder=&quot;0&quot; allowfullscreen&gt;&lt;/iframe&gt;&lt;/div&gt;
&lt;p&gt;最近气温每天零下十几度，在家闲得无聊，突发奇想用Raspberry PI做了一个简易的倒车雷达。至于有没有实际用途，再说嘛，或许过几年就有钱买车了呢…&lt;/p&gt;
&lt;p&gt;选择用Raspberry PI做的原因是… 嗯，家里正好有一个闲置的树莓派3。并且raspbian上可以直接用gcc编译c++程序。&lt;/p&gt;
&lt;p&gt;Github：&lt;a href=&quot;https://github.com/ChrisXJH/parking_sensor&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/ChrisXJH/parking_sensor&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="diy" scheme="http://chrisxjh.github.io/categories/diy/"/>
    
    
      <category term="raspberry pi" scheme="http://chrisxjh.github.io/tags/raspberry-pi/"/>
    
      <category term="树莓派" scheme="http://chrisxjh.github.io/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"/>
    
      <category term="C++" scheme="http://chrisxjh.github.io/tags/C/"/>
    
      <category term="面向对象" scheme="http://chrisxjh.github.io/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="设计模式" scheme="http://chrisxjh.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>
